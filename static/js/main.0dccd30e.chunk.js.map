{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","useState","active","setActive","prevButton","setPrevButton","nextButton","setNextButton","visiblePages","Math","ceil","useEffect","className","cn","disabled","href","onClick","state","Array","map","x","i","console","log","items","from","to","numbers","n","push","getNumbers","App","setPerPage","setCurrentPage","itemList","setItemList","pageCount","setPageCount","second","newItems","reverse","remakeList","id","value","onChange","event","target","htmlFor","length","page","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dccd30e.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const [active, setActive] = useState(0);\n  const [prevButton, setPrevButton] = useState(true);\n  const [nextButton, setNextButton] = useState(false);\n\n  const visiblePages = Math.ceil(total / perPage);\n\n  useEffect(() => {\n    if (active !== 0) {\n      setPrevButton(false);\n    } else {\n      setPrevButton(true);\n    }\n\n    if (active !== visiblePages - 1) {\n      setNextButton(false);\n    } else {\n      setNextButton(true);\n    }\n  }, [active]);\n\n  useEffect(() => {\n    setActive(0);\n    onPageChange(1);\n  }, [perPage]);\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn(\n        'page-item',\n        {\n          disabled: prevButton,\n        },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={prevButton}\n          onClick={() => {\n            setActive(state => state - 1);\n            onPageChange(currentPage - 1);\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {[...Array(visiblePages)].map((x, i) => {\n        console.log(x);\n\n        return (\n          <li\n            className={cn(\n              'page-item',\n              {\n                active: i === active,\n              },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${i + 1}`}\n              onClick={() => {\n                setActive(i);\n                onPageChange(i + 1);\n              }}\n            >\n              {i + 1}\n            </a>\n          </li>\n        );\n      })}\n\n      <li className={cn(\n        'page-item',\n        {\n          disabled: nextButton,\n        },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={nextButton}\n          onClick={() => {\n            setActive(state => state + 1);\n            onPageChange(currentPage + 1);\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemList, setItemList] = useState([0]);\n  const [pageCount, setPageCount] = useState('');\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const remakeList = () => {\n    const newItems = [];\n    let from = perPage * currentPage;\n    const to = from - perPage + 1;\n\n    if (from > 42) {\n      from = 42;\n    }\n\n    for (let i = from; i >= to; i -= 1) {\n      newItems.push(i);\n    }\n\n    setItemList(newItems.reverse());\n  };\n\n  useEffect(() => {\n    const first = perPage * currentPage - perPage + 1;\n    let second = perPage * currentPage;\n\n    if (second > 42) {\n      second = 42;\n    }\n\n    setPageCount(`${first} - ${second}`);\n  });\n\n  useEffect(() => {\n    remakeList();\n  }, [currentPage, perPage]);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${pageCount} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => {\n              setPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {itemList.map(item => (\n          <li data-cy=\"item\">\n            Item\n            {' '}\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}